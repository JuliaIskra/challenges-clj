(ns project-euler.core
  (:gen-class))

(defn problem1
  "https://projecteuler.net/problem=1
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
  The sum of these multiples is 23.
  Find the sum of all the multiples of 3 or 5 below 1000."
  []
  (->> (range 1000)
       (filter (fn [n] (or (zero? (mod n 3)) (zero? (mod n 5)))))
       (reduce +)))


(defn calc-fib
  [limit]
  (loop [fib-seq [1 2]]
    (let [next (reduce + (take-last 2 fib-seq))]
      (if (> next limit)
        fib-seq
        (recur (concat fib-seq [next]))))))

(defn problem2
  "https://projecteuler.net/problem=2
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms."
  []
  (->> (calc-fib 4000000)
       (filter even?)
       (reduce +)))


(defn calc-min-factor
  [n]
  (->> (range 2 n)
       (map (fn [div] [div (mod n div)]))
       (filter (fn [[div rem]] (zero? rem)))
       first
       first))

(defn problem3
  "https://projecteuler.net/problem=3
  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?"
  []
  (loop [n 600851475143]
    (let [min-factor (calc-min-factor n)]
      (if (nil? min-factor)
        n
        (recur (/ n min-factor))))))


(defn -main
  [number & args]
  (println (str "Running solution for problem #" number))
  (println ((resolve (symbol (str "project-euler.core/problem" number))))))

