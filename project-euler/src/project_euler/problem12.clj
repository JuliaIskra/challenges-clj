(ns project-euler.problem12
  (:require [clojure.math.numeric-tower :as math]))

(defn count-divisors
  [n]
  (->> (range 1 (math/sqrt n))
       (map (fn [d] (if (= (mod n d) 0) [d (/ n d)] nil)))
       (remove nil?)
       flatten
       count))

(defn calc-magic-numbers
  [n]
  (if (even? n)
    [(/ n 2) (+ n 1)]
    [n (/ (+ n 1) 2)]))

(defn calc-triangle-number
  [n]
  (let [[a b] (calc-magic-numbers n)]
    (* a b)))

(defn problem12
  "https://projecteuler.net/problem=12
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
  The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.
  What is the value of the first triangle number to have over five hundred divisors?"
  []
  (->> (range)
       (map calc-triangle-number)
       (map (fn [n] [n (count-divisors n)]))
       (filter (fn [[n count]] (> count 500)))
       first
       first))
